# -*- coding: utf-8 -*-
"""terapan housing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b-TKif-5jwjHUaPMXHCDhF7Upa_tKO93

# *Predictive Analysis*: Penjualan Rumah di Kota King, USA

Analisis oleh [Shelly Victory](https://www.dicoding.com/users/victorysl)

*Dataset*: [House Sales in King Country, USA](https://www.kaggle.com/harlfoxem/housesalesprediction)

### 1. Pendahuluan
Pada proyek ini dilakukan analisis prediksi harga rumah di Kota King dan Seattle sebagai tugas *submission* pertama pada kelas *Machine Learning* Terapan.

### 2. Mengimpor Pustaka *Python* yang  Diperlukan
"""

# Commented out IPython magic to ensure Python compatibility.
# pengolahan data
import numpy as np
import os
import pandas as pd

# visualisasi data
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns

import tensorflow as tf

# perancangan model
from sklearn.preprocessing import OneHotEncoder
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import AdaBoostRegressor

"""### 3. *Data Loading*

#### 3.1. Mengunduh dan Mendeskripsikan *Dataset*
"""

os.listdir('sample_data')
df = pd.read_csv('sample_data/df.csv')
df

"""### 4. *Exploratory Data Analysis*
Pada tahapan ini akan dilakukan investigasi awal pada *dataset* seperti informasi yang dimuat dan mendeteksi beberapa macam anomali.

#### 4.1 Deskripsi Fitur
"""

# melihat fitur dataset
df.info()

"""Sebelum dilakukan penyesuaian, fitur yang terdapat pada *dataset* ini meliputi: <br>
1. id: Id unik penjualan masing-masing rumah
2. date: tanggal terjualnya rumah
3. price: harga rumah
4. bedrooms: jumlah kamar tidur
5. bathrooms: jumlah kamar mandi
6. sqft_living: luas ruang tamu dalam satuan kaki persegi
7. sqft_lot: luas tanah dalam satuan kaki persegi
8. floors: jumlah lantai
9. waterfront: Apakah apartemen menghadap kawasan tepi air
10. view: tingkat kebagusan pemandangan dalam skala 1-4
11. condition: kualitas kondisi rumah dalam skala 1-5
12. grade: kualitas konstruksi dan desain rumah dalam skala 1-13.
13. sqft_above: luas kaki kuadrat rumah di atas permukaan tanah
14. sqft_basement: luas kaki kuadrat rumah di bawah permukaan tanah
15. yr_built: tahun rumah mulai dibangun
16. yr_renovated: tahun terakhir rumah direnovasi
17. zipcode: kode pos
18. lat: garis lintang
19. long: garis bujur
20. sqft_living15: luas kaki kuadrat area perumahan sebanyak 15 tetangga terdekat
21. sqft_lot15: luas kaki kuadrat tanah sebanyak 15 tetangga terdekat


Pada informasi dataset dapat diketahui bahwa fitur *dataset* telah sesuai.
"""

# melihat informasi statistik dataset pada masing-masing fitur
df.describe()

"""#### 4.2. Identifikasi *Missing Values*"""

df.isnull().sum()

# menghapus kolom yang tidak diperlukan
del df ['id']

# Membagi fitur tanggal menjadi tahun, bulan, dan tanggal

df['date'] = pd.to_datetime(df['date'])
df['year'] = df['date'].dt.year
df['month'] = df['date'].dt.month
df['day'] = df['date'].dt.day

df = df.drop("date",axis=1)

df.head(2)

df.columns

"""#### 4.3. Menangani *Outliers*"""

# identfikasi outliers pada kolom harga
sns.boxplot(x = df['price'])

# identfikasi outliers pada kolom bedrooms
sns.boxplot(x = df['bedrooms'])

# identfikasi outliers pada kolom bathrooms
sns.boxplot(x = df['bathrooms'])

# identfikasi outliers pada kolom sqft_living
sns.boxplot(x = df['sqft_living'])

# identfikasi outliers pada kolom sqft_lot
sns.boxplot(x = df['sqft_lot'])

# identfikasi outliers pada kolom floors
sns.boxplot(x = df['floors'])

# identfikasi outliers pada kolom waterfront
sns.boxplot(x = df['waterfront'])

# identfikasi outliers pada kolom view
sns.boxplot(x = df['view'])

# identfikasi outliers pada kolom condition
sns.boxplot(x = df['condition'])

# identfikasi outliers pada kolom grade
sns.boxplot(x = df['grade'])

# identfikasi outliers pada kolom sqft_above
sns.boxplot(x = df['sqft_above'])

# identfikasi outliers pada kolom sqft_basement
sns.boxplot(x = df['sqft_basement'])

# identfikasi outliers pada kolom yr_built
sns.boxplot(x = df['yr_built'])

# identfikasi outliers pada kolom zipcode
sns.boxplot(x = df['zipcode'])

# identfikasi outliers pada kolom lat
sns.boxplot(x = df['lat'])

# identfikasi outliers pada kolom long
sns.boxplot(x = df['long'])

# identfikasi outliers pada kolom sqft_living15
sns.boxplot(x = df['sqft_living15'])

# identfikasi outliers pada kolom sqft_lot15
sns.boxplot(x = df['sqft_lot15'])

# identfikasi outliers pada kolom yr_renovated
sns.boxplot(x = df['yr_renovated'])

# identfikasi outliers pada kolom year
sns.boxplot(x = df['year'])

# identfikasi outliers pada kolom month
sns.boxplot(x = df['month'])

# identfikasi outliers pada kolom day
sns.boxplot(x = df['day'])

# menangani outliers dengan metode IQR
Q1 = df.quantile(0.25)
Q3 = df.quantile(0.75)
IQR=Q3-Q1
df=df[~((df<(Q1-1.5*IQR))|(df>(Q3+1.5*IQR))).any(axis=1)]
df.shape

"""#### 4.4. *Univariate Analysis*"""

df.columns

# membagi fitur dataset berdasarkan tipe data
# tidak terdapat tipe data kategorikal
numerical_features = ['price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors',
       'waterfront', 'view', 'condition', 'grade', 'sqft_above',
       'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long',
       'sqft_living15', 'sqft_lot15', 'year', 'month', 'day']

"""##### 4.4.1. Analisis pada *Numerical Features*"""

df.hist(bins=50, figsize=(20, 15))
plt.show()

"""#### 4.5. *Multivariate Analysis*

##### 4.5.1. Analisis Fitur Numerik
"""

sns.pairplot(df, diag_kind = 'kde')

# Evaluasi Skor Korelasi
plt.figure(figsize=(10, 8))
correlation_matrix = df.corr().round(2)
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

# menghapus kolom yang tidak memiliki korelasi dengan harga
del df ['sqft_lot']
del df ['waterfront']
del df ['view']
del df ['condition']
del df ['yr_built']
del df ['yr_renovated']
del df ['zipcode']
del df ['long']
del df ['year']
del df ['month']
del df ['day']

"""### 5. Data *Preparation*

#### 5.1. Reduksi dengan PCA
"""

df.columns

sns.pairplot(df[['sqft_living', 'grade', 'sqft_above', 'lat', 'sqft_living15']], plot_kws={"s": 5});

pca = PCA(n_components=5, random_state=123)
pca.fit(df[['sqft_living', 'grade', 'sqft_above', 'lat', 'sqft_living15']])
princ_comp = pca.transform(df[['sqft_living', 'grade', 'sqft_above', 'lat', 'sqft_living15']])

pca.explained_variance_ratio_.round(5)

from sklearn.decomposition import PCA
pca = PCA(n_components=1, random_state=123)
pca.fit(df[['sqft_living', 'grade', 'sqft_above', 'lat', 'sqft_living15']])
df['dimension'] = pca.transform(df.loc[:, ('sqft_living', 'grade', 'sqft_above', 'lat', 'sqft_living15')]).flatten()
df.drop(['sqft_living', 'grade', 'sqft_above', 'lat', 'sqft_living15'], axis=1, inplace=True)

"""#### 5.2. Pembagian *Dataset*"""

X = df.drop(["price"],axis =1)
y = df["price"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state = 123)

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

"""#### 5.3. Standarisasi Data"""

numerical_features = ['dimension', 'bedrooms', 'bathrooms', 'floors', 'sqft_lot15', 'sqft_basement']
scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])
X_train[numerical_features].head()

X_train[numerical_features].describe().round(4)

"""### 6. *Model Development*

#### 6.1. *Model* dengan Algoritma K-Nearest Neighbors
"""

# Siapkan daraframe untuk analisis model
models = pd.DataFrame(index=['train_mse', 'test_mse'], 
                      columns=['KNN', 'RandomForest', 'Boosting'])

knn = KNeighborsRegressor(n_neighbors=10)
knn.fit(X_train, y_train)
y_pred_knn = knn.predict(X_train)

"""#### 6.2. *Model* dengan Algoritma Random Forest"""

# buat model prediksi
RF = RandomForestRegressor(n_estimators=50, max_depth=16, random_state=55, n_jobs=-1)
RF.fit(X_train, y_train)
 
models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=RF.predict(X_train), y_true=y_train)

"""#### 6.3. *Model* dengan Boosting Algorithm"""

boosting = AdaBoostRegressor(n_estimators=75, learning_rate=0.05, random_state=123)                             
boosting.fit(X_train, y_train)
models.loc['train_mse','Boosting'] = mean_squared_error(y_pred=boosting.predict(X_train), y_true=y_train)

"""### 7. Evaluasi Model"""

## Scale our numerical features so they have zero mean and a variance of one
X_test.loc[:, numerical_features] = scaler.transform(X_test[numerical_features])

mse = pd.DataFrame(columns=['train', 'test'], index=['KNN','RF','Boosting'])
model_dict = {'KNN': knn, 'RF': RF, 'Boosting': boosting}
for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))/1e3 
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))/1e3
 
mse

fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

prediksi = X_test.iloc[:1].copy()
pred_dict = {'y_true':y_test[:1]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)
 
pd.DataFrame(pred_dict)

"""### 8. Penutupan
Pada proyek ini dilakukan pembuatan model prediksi harga rumah di Kota King, USA. Digunakan 3 jenis alogritma ML yaitu KNN, RF, dan Boosting Algorithm dengan hasil prediksi terbaik oleh model KNN.

### 9. Referensi

Dataset: [House Sales in King Country, USA](https://www.kaggle.com/harlfoxem/housesalesprediction)
"""